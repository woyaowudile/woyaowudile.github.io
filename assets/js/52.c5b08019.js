(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{1072:function(t,e,r){"use strict";r.r(e);var i=r(36),a=Object(i.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"git"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" git")]),t._v(" "),r("h2",{attrs:{id:"一-安装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一-安装"}},[t._v("#")]),t._v(" 一. 安装")]),t._v(" "),r("p",[r("a",{attrs:{target:"_blank",href:"https://git-scm.com/downloads"}},[t._v("点击下载页面")])]),t._v(" "),r("blockquote",[r("p",[t._v("成功后，可在windows开始菜单中看到\n"),r("image-preview",{attrs:{imgUrl:"web/git/install-success.png",width:"200"}})],1)]),t._v(" "),r("div",{attrs:{id:"er"}}),t._v(" "),r("h2",{attrs:{id:"二-从零创建一个仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二-从零创建一个仓库"}},[t._v("#")]),t._v(" 二. 从零创建一个仓库")]),t._v(" "),r("blockquote",[r("p",[t._v("1.需要github、gitlab、gitee中至少有一个账号")])]),t._v(" "),r("blockquote",[r("p",[t._v("2.这里以"),r("a",{attrs:{target:"_blank",href:"https://gitee.com/"}},[t._v("gitee(点击打开官网)")]),t._v("为例")]),t._v(" "),r("blockquote",[r("p",[t._v("登录后，新建一个仓库\n"),r("image-preview",{attrs:{imgUrl:"web/git/create-register1.png",width:"200"}})],1)])]),t._v(" "),r("blockquote",[r("p",[t._v("3.自定义一个仓库名称")]),t._v(" "),r("blockquote",[r("image-preview",{attrs:{imgUrl:"web/git/create-register2.png",width:"200"}})],1)]),t._v(" "),r("blockquote",[r("p",[t._v("4.点击完成后，可以看到一个空的仓库")]),t._v(" "),r("blockquote",[r("image-preview",{attrs:{imgUrl:"web/git/create-register2-2.png",width:"200"}}),t._v(" "),r("p",[r("span",{staticStyle:{color:"red"}},[t._v("目前都是使用https的，ssh是高级用法，以后再说")])])],1)]),t._v(" "),r("blockquote",[r("p",[t._v("5.在电脑中某个位置，新建一个文件夹。初始化本地仓库， "),r("a",{attrs:{href:"#san-2"}},[t._v("git bash打开方式可参考 三- 2")])]),t._v(" "),r("blockquote",[r("image-preview",{attrs:{imgUrl:"web/git/init.png",width:"200"}})],1)]),t._v(" "),r("blockquote",[r("p",[r("span",{attrs:{id:"er-6"}},[t._v("6.新建文件后，将本地和线上仓库关联起来。并将本地代码推送到远程线上")])]),t._v(" "),r("blockquote",[r("image-preview",{attrs:{imgUrl:"web/git/push1.png",width:"200"}}),t._v(" "),r("p",[t._v("a).git add ./   "),r("br"),t._v("说明：将所有修改、新建的文件暂存，等待push到远程仓库中。如果git add test2.txt 表示只暂存这一个文件 "),r("br"),t._v(" "),r("br"),t._v("\nb).git commit -m 'xxx'  "),r("br"),t._v("说明：将暂存起来的文件，统一备注 'xxxx'，引号中随便写。 下一步push到远程仓库中 "),r("br"),t._v(" "),r("br"),t._v("\nc).git add remote origin 'https://xxxx'  "),r("br"),t._v("说明：本地关联远程仓库，一般一个本地仓库只需要关联一次即可， origin可以自定义 "),r("br"),t._v(" "),r("br"),t._v(" "),r("span",{attrs:{id:"er-6-d"}}),t._v(" "),r("br"),t._v("\nd).git push origin master  "),r("br"),t._v("说明：推送代码到远程仓库， "),r("span",{staticStyle:{color:"#c97c39ad"}},[t._v("origin必须和上面定义的一致，master表示某个分支名")]),t._v(" "),r("br"),t._v(" "),r("br")])],1)]),t._v(" "),r("blockquote",[r("p",[t._v("7.push成功后，刷新浏览器页面，可以看到上传的内容")]),t._v(" "),r("blockquote",[r("image-preview",{attrs:{imgUrl:"web/git/push1.png",width:"200"}}),t._v(" "),r("image-preview",{attrs:{imgUrl:"web/git/create-register2-3.png",width:"200"}})],1)]),t._v(" "),r("h2",{attrs:{id:"三-clone别人的仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三-clone别人的仓库"}},[t._v("#")]),t._v(" 三. clone别人的仓库")]),t._v(" "),r("blockquote",[r("p",[t._v("1.首先会有一个地址，比如上面刚刚创建的仓库(remote add origin 后面的地址), 在浏览器打开后，找到下面的按钮")]),t._v(" "),r("blockquote",[r("image-preview",{attrs:{imgUrl:"web/git/clone1.png",width:"200"}}),t._v(" "),r("image-preview",{attrs:{imgUrl:"web/git/clone2.png",width:"200"}})],1)]),t._v(" "),r("div",{attrs:{id:"san-2"}}),t._v(" "),r("blockquote",[r("p",[t._v("2.在新建的文件夹中")]),t._v(" "),r("blockquote",[r("p",[t._v("git bash 就是最开始安装的git。cmd是windows自带的。都可以使用\n"),r("image-preview",{attrs:{imgUrl:"web/git/git-cmd.png",width:"200"}})],1)])]),t._v(" "),r("blockquote",[r("p",[t._v("3.克隆代码到本地(仅第一次使用)")]),t._v(" "),r("blockquote",[r("image-preview",{attrs:{imgUrl:"web/git/clone.png",width:"200"}}),t._v(" "),r("p",[t._v("如果远程仓库中有代码变更，可以使用git pull origin master拉取最新代码（"),r("a",{attrs:{href:"#er-6-d"}},[t._v("origin和master参考 二-6-d 中的说明")]),t._v("）\n"),r("image-preview",{attrs:{imgUrl:"web/git/pull1.png",width:"200"}}),t._v("\n如果本地自己修改了代码，就要重复 "),r("a",{attrs:{href:"#er-6"}},[t._v("git add ./ -> git commit -m 'xx' -> git push 的过程")])],1)],1)]),t._v(" "),r("h2",{attrs:{id:"四-创建新分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四-创建新分支"}},[t._v("#")]),t._v(" 四. 创建新分支")]),t._v(" "),r("blockquote",[r("p",[t._v("1.分支的更新和查看")]),t._v(" "),r("blockquote",[r("image-preview",{attrs:{imgUrl:"web/git/分支1.png",width:"200"}})],1)]),t._v(" "),r("blockquote",[r("p",[t._v("2.本地创建一个新分支")]),t._v(" "),r("blockquote",[r("image-preview",{attrs:{imgUrl:"web/git/checkout.png",width:"200"}}),t._v(" "),r("p",[t._v("git checkout -b xxx master  (xxx可以随意命名。master也可以是其他分支，但必须是已存在的分支) "),r("br"),t._v("\n这时候branch -a 查看，发现本地有feature/mtx，但是远程还没有该分支。因为创建完分支后，需要push下代码\n"),r("image-preview",{attrs:{imgUrl:"web/git/push2.png",width:"200"}}),t._v("\n成功后，再次git fetch获取最新分支，git branch -a 查看所有分支，发现本地和远程中都含有feature/mtx分支")],1)],1)]),t._v(" "),r("div",{attrs:{id:"wu"}}),t._v(" "),r("h2",{attrs:{id:"五-解决冲突"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#五-解决冲突"}},[t._v("#")]),t._v(" 五. 解决冲突")]),t._v(" "),r("blockquote",[r("p",[t._v("当两个人同时开发同一个文件时，修改了同一个地方。这时候后上传代码的人需要处理这里，是使用自己的还是别人的")]),t._v(" "),r("blockquote",[r("image-preview",{attrs:{imgUrl:"web/git/练习3-1.png",width:"200"}}),t._v(" "),r("p",[t._v("假如test1文件夹先提交了代码, 如下图一切正常\n"),r("image-preview",{attrs:{imgUrl:"web/git/练习3-2.png",width:"200"}}),t._v("\n这时候test1-2再上传就会发现报错了。大致就是说push(上传)前，需要先pull(拉取)一下。因为别人已经上传了最新的代码\n"),r("image-preview",{attrs:{imgUrl:"web/git/练习3-3.png",width:"200"}}),t._v("\n使用git pull 命令拉取代码，可以看到明显的冲突\n"),r("image-preview",{attrs:{imgUrl:"web/git/练习3-4.png",width:"200"}}),t._v("\n使用vscode打开 点击划线地方的按钮。或直接打开文件，将冲突的地方删掉\n"),r("image-preview",{attrs:{imgUrl:"web/git/练习3-5.png",width:"200"}}),t._v("\n解决完了后，再次add\\commit\\push就可以了")],1)],1)]),t._v(" "),r("br"),t._v(" "),r("hr",{staticStyle:{height:"1px",border:"none","border-top":"1px dashed #0066CC"}}),t._v(" "),r("br"),t._v(" "),r("h2",{attrs:{id:"五-基础命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#五-基础命令"}},[t._v("#")]),t._v(" 五. 基础命令")]),t._v(" "),r("h4",{attrs:{id:"_1-新建仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-新建仓库"}},[t._v("#")]),t._v(" 1.新建仓库")]),t._v(" "),r("blockquote",[r("p",[t._v("git init  "),r("br"),t._v("\ngit remote add origin 'http://xxxxxx' "),r("br"),t._v("\nnpm config set registry http://192.168.1.181:4873 // 设置npm安装ip")])]),t._v(" "),r("h5",{attrs:{id:"_2-获取远端分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-获取远端分支"}},[t._v("#")]),t._v(" 2. 获取远端分支")]),t._v(" "),r("blockquote",[r("p",[t._v("如果是新的仓库，这里只有master分支 "),r("br")]),t._v(" "),r("blockquote",[r("p",[t._v("使用命令： git fetch 获取远端所有分支\n查看本地分支 git branch "),r("br"),t._v("\n查看远端分支 git branch -r "),r("br"),t._v("\n查看所有分支 git branch -a")])])]),t._v(" "),r("blockquote",[r("p",[t._v("如果远程分支被删，本地还有被删除的分支")]),t._v(" "),r("blockquote",[r("p",[t._v("删除本地分支： git branch -d xxx")])])]),t._v(" "),r("h5",{attrs:{id:"_3-切换分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-切换分支"}},[t._v("#")]),t._v(" 3. 切换分支")]),t._v(" "),r("blockquote",[r("p",[t._v("切换分支： git checkout xxxx "),r("br"),t._v("\n新建分支： git branch xxxx "),r("br"),t._v("\n新建并且切换到对应分支： git checkout -b 'xxx' origin/xxxx "),r("br")]),t._v(" "),r("blockquote",[r("p",[t._v("xxx表示本地的名字，origin/xxxx 表示远端的分支名字")])])]),t._v(" "),r("h5",{attrs:{id:"_4-放弃修改"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-放弃修改"}},[t._v("#")]),t._v(" 4. 放弃修改")]),t._v(" "),r("blockquote",[r("p",[t._v("已经add的代码 "),r("br")]),t._v(" "),r("blockquote",[r("p",[t._v("git reset HEAD xxx / git resrt HEAD . 撤销指定文件 / 所有文件")])])]),t._v(" "),r("blockquote",[r("p",[t._v("未add的代码")]),t._v(" "),r("blockquote",[r("p",[t._v("git checkout ./  放弃所有已经修改的文件！！！注意慎用")])])]),t._v(" "),r("h5",{attrs:{id:"_5-回退版本"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-回退版本"}},[t._v("#")]),t._v(" 5. 回退版本")]),t._v(" "),r("blockquote",[r("p",[t._v("git log 获取提交历史 "),r("br"),t._v("\ngit reset --hard HEAD^ 回退上一次 "),r("br"),t._v("\ngit reset --hard commitid 'xx' 回退指定历史版本 "),r("br"),t._v("\ngit reflog 也是获取提交历史 "),r("br"),t._v("\ngit reset HARD")])]),t._v(" "),r("h4",{attrs:{id:"_6-合并"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-合并"}},[t._v("#")]),t._v(" 6. 合并")]),t._v(" "),r("blockquote",[r("p",[t._v("1.将代码提交到当前分支 "),r("br"),t._v("\n2.切换到要合并的分支，比如将a合并到master "),r("br")]),t._v(" "),r("blockquote",[r("p",[t._v("git checkout master "),r("br"),t._v("\ngit merge a "),r("br"),t._v("\ngit push origin master "),r("br"),t._v("\n注： 切换到新分支最好拉取代码解决冲突后再提交")])])]),t._v(" "),r("h2",{attrs:{id:"六-配置用户名、密码、邮箱-全局加上-global"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#六-配置用户名、密码、邮箱-全局加上-global"}},[t._v("#")]),t._v(" 六. 配置用户名、密码、邮箱（全局加上 --global）")]),t._v(" "),r("blockquote",[r("p",[t._v("git config user xxxx "),r("br"),t._v("\ngit config email xxxx "),r("br"),t._v("\ngit config password xxxx")])]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),r("p",[t._v("但是每次拉取、推送，还需要输入用户名、密码，所以配置： "),r("br"),t._v(" "),r("code",[t._v("git config --global(全局时使用) credential.helper store")]),t._v(" "),r("br")])]),t._v(" "),r("h2",{attrs:{id:"七-代码关联多个仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#七-代码关联多个仓库"}},[t._v("#")]),t._v(" 七. 代码关联多个仓库")]),t._v(" "),r("blockquote",[r("p",[t._v("本地项目 project，现在要同时上传到 githubA、githubB")]),t._v(" "),r("ol",[r("li",[t._v("project已经是拉取的项目A")]),t._v(" "),r("li",[t._v("git remote set-url --add origin http://githubB")]),t._v(" "),r("li",[t._v("git push origin master")])])]),t._v(" "),r("div",{staticClass:"language-text line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("如果报错：\n    有一个项目提示要先拉取再提交，那么就单独关联一下，即\n    1.\n        git remote add other htt://githubB\n        git pull other master （将代码拉到本地，冲突合并等等处理完后）\n        git pull origin master (将最新的代码也拉取到本地)\n        git push origin master (最后直接推送即可)\n        最后可以 git remote remove other\n    2.\n        git push origin master:master (当前本地所在分支:远程分支)\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br")])]),r("h2",{attrs:{id:"八-练习"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#八-练习"}},[t._v("#")]),t._v(" 八. 练习")]),t._v(" "),r("blockquote",[r("p",[t._v("1.申请"),r("a",{attrs:{target:"_blank",href:"https://gitee.com/"}},[t._v("gitee（建议使用）")]),t._v("、github、gitlab中任意一个网站， "),r("a",{attrs:{href:"#er"}},[t._v("并按照 二 创建一个仓库 remote1")])])]),t._v(" "),r("blockquote",[r("p",[t._v("2.对 remote1 新建一个分支 xxx，并且给该分支推送一个新文件 a 。练习完成后将本地、远程的分支都删掉")])]),t._v(" "),r("blockquote",[r("p",[t._v("3.冲突练习，"),r("a",{attrs:{href:"#wu"}},[t._v("参考五")])]),t._v(" "),r("blockquote",[r("p",[t._v("重新创建一个新文件夹b，拉取 remote1 代码。\n切换到 xxx 分支\n文件夹a、b, 都修改文件a的内容(内容不能一样， 比如在a中改成 '这是文件夹a修改的内容'，b同)\n先提交文件夹a的代码，随后在b中提交。此时会出现冲突，应该提交不上去")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);